<%

def toListOpers = { arg ->
	if(arg.endsWith("]")){
		def root = arg.substring(0, arg.indexOf("["))
		def getArg = arg.substring(arg.indexOf("[")+1, arg.indexOf("]"))
		return "(nth @${root} ${getArg})"
	}
	if(Pattern.compile("-?\\d+").matcher(arg).matches()) {
    	return "Integer.valueOf($arg)"
	}
	
	return "@${arg}"
}

def pr


def translate 
translate = { oper, args ->
	for(int i = 0; i < args.size(); i++){
		if(!(args[i] instanceof String)){
			//not a string, assuming Expr
			args[i] = translate(args[i].oper, args[i].args)
		}
	}  
	switch(oper){
		case 'eq':
			return "(== ${args[0]} ${toListOpers(args[1])})"
		break
		case 'neq':
			return "(!= ${args[0]} ${args[1]})"
		break
		case 'lt':
			return "(< ${args[0]}  ${args[1]})"
		break
		case 'sizeOf':
			return "(.size @${args[0]})"
		case 'isEmpty':
			return "(== 0 (.size @${args[0]}))"
		break
		default:
			throw new RuntimeException("unknown operator: $oper")
	}
}

pr = translate.call(stmt.oper,stmt.args)

%>$pr